1. insertion
  add(value)
  pre: value is the value to add
  post: value had been placed in the correct location in the tree
  
  if (root == null) {
      root = node(value) 
  } else {
      addNode(root, value)
  }
  
  ==========
  addNode(root, value)
  pre: root is node to start from
  post: value has been placed in the correct location in the tree
  
  if (value < root.value) 
      if (root.left == null)
          root.left = node(value)
      else
          addNode(root.left, value)
  else
      if (root.right == null)
          root.right = node(value)
      else
          addNode(root.right, value)
          
 2. searching
    contains(value)
    pre: value is searching for, root is the root of the tree
    post: if value is located in the tree returns true, otherwise false
    
    if (root == null)
        return false
    
    if (root.value == value)
        return true
        
    if (value < root.value)
        return contains(root.left, value)
    else 
        return contains(root.right, value)
        
 3. traversing
    there are variuos strategies which can be imployed to traverse the items in the tree
    1 preorder
    2 postorder
    3 inorder
    
    preoder(root)
    pre: root is the root of the BST
    post: node of the BST have been visited in preorder
    
    if (root == null)
        return
        
    yield root.value
    preorder(root.left)
    preorder(root.right)
    
    =================
    
    postorder(root)
    pre: root - is the root node of the BST
    post: the nodes of the BST have been visited in postorder
    
    if (root == null)
        return
        
     postorder(root.left)
     postorder(root.right)
     yield root.value
     
     =================
     
     inorder(root)
     pre: root is the root node of the BST
     post: the nodes of the BST have been visited in inorder
     
     if (root == null)
        return
        
     inorder(root.left)
     yield root.value
     inorder(root.right)
    
4. removing
   remove(value)
   pre: value is the value of the node to remove
   post: node with value is removed if found in which case yields true, otherwise returns false
 
   node = findNode(root, value)
   if (node == null)
      return false //value not found in the BST
      
   if (node == root)
      root = null  // we are removing the only node in the BST
      return true
   
   parent = findParent(root, value)
   
   if (node.left == null && node.right == null)
      if (value < parent.value)
          parent.left = null
      else
          parent.right = null
   else if (node.left != null && node.right == null)
      if (value < parent.value)
          parent.left = node.left
      else 
          parent.right = node.left
   else if (node.left == null && node.right != null)
      if (value < parent.value)
          parent.left = node.right    
      else
          parent.right = node.right
   else
       // this is most complicated part of this method
       ==            second approach
       largestLeftNode = node.right
       while(largestLeftNode.left != null)
          // find the largest value if left subtree of node (node to remove)
          largestLeftNode = largestLeftNode.left
       // set the parenst's right pointer of the largestValue to null   
       largerLeftParent = findParent(node, largestLeftNode.value);
       largetLeftParent.left = null;
       node.value = largestLeftNode.value
       
       ====================================================================
       
       ==            second approach
       ==     // find min node in right sub tree of nodeToRemove
       ==     Node minNode = findMin(nodeToRemove.right);
       ==
       ==     Node minNodeParent = findParent(nodeToRemove, minNode.value);
       ==     // set minNode to null
       ==     minNodeParent.left = null;
       ==     
       ==     // replace nodeToRemove value with minNode value
       ==     nodeToRemove.value = minNode.value;
       
   return true;
   
   
   ========================
   findNode(current, value)
   pre: value is the value of the node we want to find,
        current is node to start
   post: return a reference to the node of value if found, otherwise null
   
   if (current == null)
      return null
      
   if (value == current.value)
      return current
   
   if (value < current.value)
      return findNode(current.left, value)
   else
      return findNode(current.right, value)
      
      
   =========================
   findParent(root, value)
   pre: root is node to start
        value is the value searching for
   post: returns a referene to the parent of value if foudn; otherwise null
   
   if (root.value == value)
      return null
   
   if (value < root.value)
      
      if (root.left == null)
          return null
      
      if (value == root.left.value)
          return root
      else
          return findParent(root.left, value)
     
   else
      
      if (root.right == null)
          return null
          
      if (value == root.right.value)
          return root
      else
          return findParent(root.right,value)
   
   
          
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
