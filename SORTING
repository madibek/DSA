1. Bubble sort
  bubble(list) 
  pre: list != null
  post: list has been sorted ascending order
  complexity: O(n^2)
  
  for i = 0 to list.count
    for j = i + 1 to list.count
      if (list[i] > list[j]
        swap(list, i, j)
  
  return list
  
2. Merge sort
  mergeSort(list)
  pre: list != null
  post: list has been sorted in ascending order
  comlexity: O(n*log n)
  
  if (list.count < 2) 
    // list with only one item is alreadt sorted
    return list
  
  left = list.count / 2
  right = list.count - left
  
  for i = 0 to left
    leftList[i] = list[i]
    
  for i = 0 to right
    rightList[i] = list[left + i]
    
  leftList = mergeSort(leftList)
  rightList = mergeSort(rightList)
  
  return merge(leftList, rightList, list)
  
  ====================
  merge(leftList, rightList, result)
  pre: leftList and rightList are not null
  post: return result merged with leftList and rightList, which ordered in ascending order
  
  count = 0
  left = 0
  right = 0
  
  while(left < leftList.count and right < rightList.count
    if (leftList[left] < rightList[right]
        result[count] = leftList[left]
        left = left + 1
    else
        result[count] = rightList[right]
        right = right + 1
        
    count = count + 1
    
    
  while (left < leftList.count)
    result[count] = leftList[left]
    left = left + 1
    count = count + 1
    
  while (right < rightList.count)
    result[count] = rightList[right]
    right = right + 1
    count = count + 1
    
  return newList
  
3. Quick sort
  quickSort(list)
  pre: list is not null
  post: list has been sorted in ascending order
  complexity: O(n * log n)
  
  if (list.count <= 1)
     return list
     
  pivot = medianValue(list)
  equalList
  lessList
  greaterList
  
  for i = 0 to list.count
    if (list[i] == pivot)
      equalList.add(list[i])
    else if (list[i] < pivot)
      lessList.add(list[i])
    else
      greaterList.add(list[i])
      
   return concatenate(quickSort(lessList), equalList, quickSort(greaterList))
   
   ==================
   medianValue(list)
   
    return list[list.count / 2]
    
   ==================
   concatenate(list1, list2, list3) 
   
   newList
   count = 0
   
   for i = 0 to list1.count
    newList[count] = list1[i]
    count = count + 1
    
   for i = 0 to list2.count
    newList[count] = list2[i]
    count = count + 1
    
   for i = 0 to list3.count
    newList[count] = list3[i]
    count = count + 1
    
   return newList
   
4. Insertion sort
  insertionSort(list)
  pre: list != null
  post: list has been sorted
  
  if (list.count <= 1)
    return list
  
  i, j, key, temp
  
  for i = 1 to list.count 
    key = list[i]
    j = i - 1
    while (j >= 0 and list[j] > key)
      temp = list[j]
      list[j] = list[j + 1]
      list[j + 1] = temp
      j--
    
  return list
  
  ==============================
  insertionSort2(arr) 
  pre: arr is not null
  post: arr has been sorted in asceding order
  
  if (arr.count < 2)
    // arr has only one item and is sorted
    return arr
    
  start = 1
  while (stat < arr.count)
    value = arr[start]
    index = start - 1
    
    while (index >= 0 and value < arr[index])
      arr[index + 1] = arr[index]
      index = index - 1
      
    arr[index + 1] = value
    start = start + 1
    
   
  return arr
  
  
5. Selection sort
  selectioinSort(list)
  pre: list != null
  post: list has been sorted in ascending order
  complexity: O(n ^ 2)
  
  for i = 0 to list.count
    min = i
    
    for j = i + 1 to list.count
      if (list[min] > list[j])
        min = j
        
    swap(list, i, min)
    
   
  
  
  
    
   
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
  
  
  
