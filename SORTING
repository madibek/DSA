1. Bubble sort
  bubble(list) 
  pre: list != null
  post: list has been sorted ascending order
  complexity: O(n^2)
  
  for i = 0 to list.count - 1
    for j = 0 to list.count - i -1
      if (list[i] < list[j]
        swap(list, i, j)
  
  return list
  
2. Merge sort
  mergeSort(list)
  pre: list != null
  post: list has been sorted in ascending order
  comlexity: O(n*log n)
  
  middle = list.count / 2
  
  for i = 0 to middle
    leftList[i] = list[i]
    
  for i = 0 to list.count - middle
    rightList[i] = list[middle + i]
    
  leftList = mergeSort(leftList)
  rightList = mergeSort(rightList)
  
  return mergeOrdered(leftList, rightList)
  
  ====================
  mergeOrdered(list1, list2)
  pre: list1 and list2 are not null
  post: return list merged with list1 and list2, which ordered in ascending order
  
  newlist
  for i = 0 to list1.count
    newList[i] = list1[i]
  
  for i = 0 to list2.count
    newList[list1.count + 1] = list2[i]
    
  return newList
  
3. Quick sort
  quickSort(list)
  pre: list is not null
  post: list has been sorted in ascending order
  complexity: O(n * log n)
  
  if (list.count <= 1)
     return list
     
  pivot = medianValue(list)
  equalList
  lessList
  greaterList
  
  for i = 0 to list.count
    if (list[i] == pivot)
      equalList.add(list[i])
    else if (list[i] < pivot)
      lessList.add(list[i])
    else
      greaterList.add(list[i])
      
   return concatenate(quickSort(lessList), equalList, quickSort(greaterList))
   
   ==================
   medianValue(list)
   
    return list[list.count / 2]
    
   ==================
   concatenate(list1, list2, list3) 
   
   newList
   count = 0
   
   for i = 0 to list1.count
    newList[count] = list1[i]
    count = count + 1
    
   for i = 0 to list2.count
    newList[count] = list2[i]
    count = count + 1
    
   for i = 0 to list3.count
    newList[count] = list3[i]
    count = count + 1
    
   return newList
   
4. Insertion sort
  insertionSort(list)
  pre: list != null
  post: list has been sorted
  
  if (list.count <= 1)
    return list
  
  i, j, key, temp
  
  for i = 1 to list.count 
    key = list[i]
    j = i - 1
    while (j >= 0 and list[j] > key)
      temp = list[j]
      list[j] = list[j + 1]
      list[j + 1] = temp
      j--
    
  return list
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
  
  
  
